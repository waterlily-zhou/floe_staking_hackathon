/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockStaking,
  MockStakingInterface,
} from "../../../contracts/MockStaking.sol/MockStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getTotalRewardsBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewardBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405268056bc75e2d6310000060045534801561001d57600080fd5b50604051610ba7380380610ba7833981810160405281019061003f919061012a565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061016a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100f7826100cc565b9050919050565b610107816100ec565b811461011257600080fd5b50565b600081519050610124816100fe565b92915050565b60008060408385031215610141576101406100c7565b5b600061014f85828601610115565b925050602061016085828601610115565b9150509250929050565b610a2e806101796000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806372f702f31161006657806372f702f3146101445780637b0a47ee146101625780638dbefee214610180578063a694fc3a146101b0578063f7c618c1146101cc57610093565b80630962ef791461009857806360217267146100b457806367b40cf7146100e457806370a0823114610114575b600080fd5b6100b260048036038101906100ad9190610648565b6101ea565b005b6100ce60048036038101906100c991906106d3565b610366565b6040516100db919061070f565b60405180910390f35b6100fe60048036038101906100f991906106d3565b61037e565b60405161010b919061070f565b60405180910390f35b61012e600480360381019061012991906106d3565b610396565b60405161013b919061070f565b60405180910390f35b61014c6103df565b6040516101599190610789565b60405180910390f35b61016a610403565b604051610177919061070f565b60405180910390f35b61019a600480360381019061019591906106d3565b610409565b6040516101a7919061070f565b60405180910390f35b6101ca60048036038101906101c59190610648565b610452565b005b6101d46105e7565b6040516101e19190610789565b60405180910390f35b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561026c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026390610801565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102bb9190610850565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161031f929190610893565b6020604051808303816000875af115801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906108f4565b5050565b60026020528060005260406000206000915090505481565b60036020528060005260406000206000915090505481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008111610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c9061096d565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016104f29392919061098d565b6020604051808303816000875af1158015610511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053591906108f4565b5080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461058591906109c4565b92505081905550600454600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105dd91906109c4565b9250508190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b6000819050919050565b61062581610612565b811461063057600080fd5b50565b6000813590506106428161061c565b92915050565b60006020828403121561065e5761065d61060d565b5b600061066c84828501610633565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106a082610675565b9050919050565b6106b081610695565b81146106bb57600080fd5b50565b6000813590506106cd816106a7565b92915050565b6000602082840312156106e9576106e861060d565b5b60006106f7848285016106be565b91505092915050565b61070981610612565b82525050565b60006020820190506107246000830184610700565b92915050565b6000819050919050565b600061074f61074a61074584610675565b61072a565b610675565b9050919050565b600061076182610734565b9050919050565b600061077382610756565b9050919050565b61078381610768565b82525050565b600060208201905061079e600083018461077a565b92915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820726577617264730000000000000000000000000000600082015250565b60006107eb6012836107a4565b91506107f6826107b5565b602082019050919050565b6000602082019050818103600083015261081a816107de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061085b82610612565b915061086683610612565b925082820390508181111561087e5761087d610821565b5b92915050565b61088d81610695565b82525050565b60006040820190506108a86000830185610884565b6108b56020830184610700565b9392505050565b60008115159050919050565b6108d1816108bc565b81146108dc57600080fd5b50565b6000815190506108ee816108c8565b92915050565b60006020828403121561090a5761090961060d565b5b6000610918848285016108df565b91505092915050565b7f43616e6e6f74207374616b65207a65726f000000000000000000000000000000600082015250565b60006109576011836107a4565b915061096282610921565b602082019050919050565b600060208201905081810360008301526109868161094a565b9050919050565b60006060820190506109a26000830186610884565b6109af6020830185610884565b6109bc6040830184610700565b949350505050565b60006109cf82610612565b91506109da83610612565b92508282019050808211156109f2576109f1610821565b5b9291505056fea264697066735822122030856d55802c7600635fa5c49a7dc05a9033a3eaf1ab2387fbe865fc051870a664736f6c63430008140033";

type MockStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStaking__factory extends ContractFactory {
  constructor(...args: MockStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _stakingToken: AddressLike,
    _rewardToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardToken,
      overrides || {}
    );
  }
  override deploy(
    _stakingToken: AddressLike,
    _rewardToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _stakingToken,
      _rewardToken,
      overrides || {}
    ) as Promise<
      MockStaking & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockStaking__factory {
    return super.connect(runner) as MockStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStakingInterface {
    return new Interface(_abi) as MockStakingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockStaking {
    return new Contract(address, _abi, runner) as unknown as MockStaking;
  }
}
