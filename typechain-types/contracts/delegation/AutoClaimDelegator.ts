/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AutoClaimDelegatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "batchClaimOnBehalf"
      | "delegateClaims"
      | "delegationExpiry"
      | "getDelegationDetails"
      | "hasDelegatedClaims"
      | "revokeDelegation"
      | "setAdmin"
      | "shouldClaim"
      | "userThresholds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimDelegated"
      | "ClaimRevoked"
      | "RatioCalculated"
      | "RewardsClaimed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchClaimOnBehalf",
    values: [AddressLike, AddressLike[], AddressLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateClaims",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationExpiry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDelegatedClaims",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldClaim",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userThresholds",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchClaimOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDelegatedClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userThresholds",
    data: BytesLike
  ): Result;
}

export namespace ClaimDelegatedEvent {
  export type InputTuple = [
    user: AddressLike,
    minRewardsUsd: BigNumberish,
    gasAwareRatio: BigNumberish,
    compoundAwareRatio: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    minRewardsUsd: bigint,
    gasAwareRatio: bigint,
    compoundAwareRatio: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    user: string;
    minRewardsUsd: bigint;
    gasAwareRatio: bigint;
    compoundAwareRatio: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRevokedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatioCalculatedEvent {
  export type InputTuple = [
    ratioType: string,
    numerator: BigNumberish,
    denominator: BigNumberish,
    ratio: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [
    ratioType: string,
    numerator: bigint,
    denominator: bigint,
    ratio: bigint,
    threshold: bigint
  ];
  export interface OutputObject {
    ratioType: string;
    numerator: bigint;
    denominator: bigint;
    ratio: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AutoClaimDelegator extends BaseContract {
  connect(runner?: ContractRunner | null): AutoClaimDelegator;
  waitForDeployment(): Promise<this>;

  interface: AutoClaimDelegatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  batchClaimOnBehalf: TypedContractMethod<
    [
      user: AddressLike,
      gaugeAddresses: AddressLike[],
      rewardTokensPerGauge: AddressLike[][]
    ],
    [void],
    "nonpayable"
  >;

  delegateClaims: TypedContractMethod<
    [
      minRewardsUsd: BigNumberish,
      gasAwareRatio: BigNumberish,
      compoundAwareRatio: BigNumberish,
      durationDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  delegationExpiry: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getDelegationDetails: TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        hasValidDelegation: boolean;
        minRewardsUsd: bigint;
        gasAwareRatio: bigint;
        compoundAwareRatio: bigint;
        expiry: bigint;
      }
    ],
    "view"
  >;

  hasDelegatedClaims: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  revokeDelegation: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  shouldClaim: TypedContractMethod<
    [
      user: AddressLike,
      currentRewardsUsd: BigNumberish,
      gasPrice: BigNumberish,
      estimatedGasCost: BigNumberish,
      estimatedCompoundReturn: BigNumberish
    ],
    [boolean],
    "view"
  >;

  userThresholds: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        minRewardsUsd: bigint;
        gasAwareRatio: bigint;
        compoundAwareRatio: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchClaimOnBehalf"
  ): TypedContractMethod<
    [
      user: AddressLike,
      gaugeAddresses: AddressLike[],
      rewardTokensPerGauge: AddressLike[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateClaims"
  ): TypedContractMethod<
    [
      minRewardsUsd: BigNumberish,
      gasAwareRatio: BigNumberish,
      compoundAwareRatio: BigNumberish,
      durationDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegationExpiry"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDelegationDetails"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        hasValidDelegation: boolean;
        minRewardsUsd: bigint;
        gasAwareRatio: bigint;
        compoundAwareRatio: bigint;
        expiry: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasDelegatedClaims"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokeDelegation"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shouldClaim"
  ): TypedContractMethod<
    [
      user: AddressLike,
      currentRewardsUsd: BigNumberish,
      gasPrice: BigNumberish,
      estimatedGasCost: BigNumberish,
      estimatedCompoundReturn: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userThresholds"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        minRewardsUsd: bigint;
        gasAwareRatio: bigint;
        compoundAwareRatio: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ClaimDelegated"
  ): TypedContractEvent<
    ClaimDelegatedEvent.InputTuple,
    ClaimDelegatedEvent.OutputTuple,
    ClaimDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRevoked"
  ): TypedContractEvent<
    ClaimRevokedEvent.InputTuple,
    ClaimRevokedEvent.OutputTuple,
    ClaimRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RatioCalculated"
  ): TypedContractEvent<
    RatioCalculatedEvent.InputTuple,
    RatioCalculatedEvent.OutputTuple,
    RatioCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;

  filters: {
    "ClaimDelegated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ClaimDelegatedEvent.InputTuple,
      ClaimDelegatedEvent.OutputTuple,
      ClaimDelegatedEvent.OutputObject
    >;
    ClaimDelegated: TypedContractEvent<
      ClaimDelegatedEvent.InputTuple,
      ClaimDelegatedEvent.OutputTuple,
      ClaimDelegatedEvent.OutputObject
    >;

    "ClaimRevoked(address)": TypedContractEvent<
      ClaimRevokedEvent.InputTuple,
      ClaimRevokedEvent.OutputTuple,
      ClaimRevokedEvent.OutputObject
    >;
    ClaimRevoked: TypedContractEvent<
      ClaimRevokedEvent.InputTuple,
      ClaimRevokedEvent.OutputTuple,
      ClaimRevokedEvent.OutputObject
    >;

    "RatioCalculated(string,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RatioCalculatedEvent.InputTuple,
      RatioCalculatedEvent.OutputTuple,
      RatioCalculatedEvent.OutputObject
    >;
    RatioCalculated: TypedContractEvent<
      RatioCalculatedEvent.InputTuple,
      RatioCalculatedEvent.OutputTuple,
      RatioCalculatedEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
  };
}
